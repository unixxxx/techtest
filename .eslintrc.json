/**
 * -----------------------------------------------------
 * NOTES ON CONFIGURATION STRUCTURE
 * -----------------------------------------------------
 *
 * Out of the box, ESLint does not support TypeScript or HTML. Naturally those are the two
 * main file types we care about in Angular projects, so we have to do a little extra work
 * to configure ESLint exactly how we need to.
 *
 * Fortunately, ESLint gives us an "overrides" configuration option which allows us to set
 * different lint tooling (parser, plugins, rules etc) for different file types, which is
 * critical because our .ts files require a different parser and different rules to our
 * .html (and our inline Component) templates.
 */
{
    "extends": [
        "eslint:recommended",
        // uncomment when possible
        // "plugin:@typescript-eslint/eslint-recommended",
        // "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended"
    ],
    "plugins": ["import"],
    // Most of the rules can be looked for using the https://eslint.org/docs/rules/{rulename}
    "root": true,
    "overrides": [
        /**
         * -----------------------------------------------------
         * TYPESCRIPT FILES (COMPONENTS, SERVICES ETC) (.ts)
         * -----------------------------------------------------
         */
        {
            "files": ["*.ts"],
            "parserOptions": {
                "project": ["tsconfig.*?.json", "e2e/tsconfig.json"],
                "createDefaultProgram": true
            },
            "extends": ["plugin:@angular-eslint/recommended"],
            "rules": {
                /**
                 * Any TypeScript related rules you wish to use/reconfigure over and above the
                 * recommended set provided by the @angular-eslint project would go here.
                 *
                 * There are some examples below from the @angular-eslint plugin and ESLint core:
                 */
                "@angular-eslint/directive-selector": [
                    "error",
                    {
                        "type": "attribute",
                        "prefix": "app",
                        "style": "camelCase"
                    }
                ],
                "@angular-eslint/component-selector": [
                    "error",
                    {
                        "type": "element",
                        "prefix": "app",
                        "style": "kebab-case"
                    }
                ],
                "quotes": ["error", "single", { "allowTemplateLiterals": true }]
            }
        },

        /**
         * -----------------------------------------------------
         * COMPONENT TEMPLATES
         * -----------------------------------------------------
         *
         * If you use inline templates, make sure you read the notes on the configuration
         * object after this one to understand how they relate to this configuration directly
         * below.
         */
        {
            "files": ["*.component.html"],
            "extends": ["plugin:@angular-eslint/template/recommended"],
            "rules": {
                /**
                 * Any template/HTML related rules you wish to use/reconfigure over and above the
                 * recommended set provided by the @angular-eslint project would go here.
                 *
                 * There is an example below from ESLint core (note, this specific example is not
                 * necessarily recommended for all projects):
                 */
                "max-len": ["warn", { "code": 110 }]
            }
        },

        /**
         * -----------------------------------------------------
         * EXTRACT INLINE TEMPLATES (from within .component.ts)
         * -----------------------------------------------------
         *
         * This extra piece of configuration is necessary to extract inline
         * templates from within Component metadata, e.g.:
         *
         * @Component({
         *  template: `<h1>Hello, World!</h1>`
         * })
         * ...
         *
         * It works by extracting the template part of the file and treating it as
         * if it were a full .html file, and it will therefore match the configuration
         * specific for *.component.html above when it comes to actual rules etc.
         *
         * NOTE: This processor will skip a lot of work when it runs if you don"t use
         * inline templates in your projects currently, so there is no great benefit
         * in removing it, but you can if you want to.
         *
         * You won"t specify any rules here. As noted above, the rules that are relevant
         * to inline templates are the same as the ones defined for *.component.html.
         */
        {
            "files": ["*.component.ts"],
            "extends": [
                "plugin:@angular-eslint/template/process-inline-templates"
            ]
        }
    ],
    // Global rules to seperate into the ones for html templates and the ones for classes when possible

    "rules": {
        // ------------------------------------------------------------------------------
        // Possible Errors -> OFF
        //-------------------------------------------------------------------------------
        "no-extra-parens": ["off"], //disallow unnecessary parentheses
        "no-misleading-character-class": ["off"], //Disallow characters which are made with multiple code points in character class syntax
        "no-prototype-builtins": ["off"], //Disallow use of Object.prototypes builtins directly
        "no-restricted-syntax": ["off"], //to be able to use syntax like `${variable}` for a string
        "no-template-curly-in-string": ["off"], //Disallow template literal placeholder syntax in regular strings
        "no-useless-backreference": ["off"], //Disallow useless backreferences in regular expressions
        "require-atomic-updates": ["off"], //Disallow assignments that can lead to race conditions due to usage of await or yield

        // ------------------------------------------------------------------------------
        // Possible Errors -> errors non mergeable
        //-------------------------------------------------------------------------------
        "getter-return": ["error"], //Enforces that a return statement is present in property getters (getter-return)
        "import/default": ["error"], //Ensure a default export is present, given a default import
        "import/dynamic-import-chunkname": ["error"], // Enforce a leading comment with the webpackChunkName for dynamic imports
        "import/export": ["error"], // Report any invalid exports, i.e. re-export of the same name
        "import/named": ["error"], //Ensure named imports correspond to a named export in the remote file
        "import/no-anonymous-default-export": ["error"], // Forbid anonymous values as default exports
        "import/no-cycle": ["error"], //Forbid a module from importing a module with a dependency path back to itself
        "import/no-duplicates": ["error"], // Report repeated import of the same module in multiple places
        "import/no-dynamic-require": ["error"], //Forbid require() calls with expressions
        "import/no-mutable-exports": ["error"], // Forbid the use of mutable exports with var or let.
        "import/no-named-as-default": ["error"], // Report use of exported name as identifier of default export
        "import/no-named-as-default-member": ["error"], // Report use of exported name as property of default export
        "import/no-named-default": ["error"], // Forbid named default exports
        "import/no-self-import": ["error"], //Forbid a module from importing itself
        "import/no-useless-path-segments": ["error"], //Prevent unnecessary path segments in import and require statements
        "no-console": ["error", { "allow": ["debug", "warn", "error"] }], //disallow the use of console
        "no-control-regex": ["error"], //disallow control characters in regular expressions
        "no-debugger": ["error"], //disallow the use of debugger
        "no-dupe-args": ["error"], //disallow duplicate arguments in function definitions
        "no-dupe-keys": ["error"], //disallow duplicate keys in object literals
        "no-duplicate-case": ["error"], //Rule to disallow a duplicate case label
        "no-ex-assign": ["error"], //disallow reassigning exceptions in catch clauses
        "no-func-assign": ["error"], //disallow reassigning function declarations
        "no-import-assign": ["error"], //disallow assigning to imported bindings
        "no-inner-declarations": ["error"], //disallow variable or function declarations in nested blocks
        "no-invalid-regexp": ["error"], //disallow invalid regular expression strings in RegExp constructors
        "no-irregular-whitespace": ["error"], //disallow irregular whitespace
        "no-obj-calls": ["error"], //disallow calling global object properties as functions
        "no-promise-executor-return": ["error"], //Disallow returning values from Promise executor functions
        "no-regex-spaces": ["error"], //disallow multiple spaces in regular expression literals
        "no-setter-return": ["error"], //Disallow returning values from setters
        "no-unexpected-multiline": ["error"], //disallow confusing multiline expressions
        "no-unreachable-loop": ["error"], //Disallow loops with a body that allows only one iteration
        "no-unsafe-finally": ["error"], //disallow control flow statements in finally blocks
        "no-unsafe-negation": ["error"], //disallow negating the left operand of relational operators
        "use-isnan": ["error"], //require calls to isNaN() when checking for NaN
        "valid-typeof": ["error"], //enforce comparing typeof expressions against valid strings

        // ------------------------------------------------------------------------------
        // Possible Errors -> just a warning
        //-------------------------------------------------------------------------------
        //TODO : FIx ERROR "import/first": ["error"], // Ensure all imports appear before other statements
        //TODO : FIx ERROR "import/exports-last": ["error"], // Ensure all exports appear after other statements
        "import/group-exports": ["warn"], // Prefer named exports to be grouped together in a single export declaration
        "import/max-dependencies": ["warn", { "max": 30 }], // Limit the maximum number of dependencies a module can have
        "import/newline-after-import": ["warn"], // Enforce a newline after import statements
        "import/no-extraneous-dependencies": ["warn"], // Forbid the use of extraneous packages
        "import/no-unassigned-import": ["warn"], // Forbid unassigned imports
        "no-await-in-loop": ["warn"], //Disallow await inside of loops (no-await-in-loop)
        "no-constant-condition": ["error"], //disallow constant expressions in conditions
        "no-dupe-else-if": ["warn"], //Disallow duplicate conditions in if-else-if chains
        "no-empty": ["warn"], //disallow empty block statements
        "no-empty-character-class": ["warn"], //disallow empty character classes in regular expressions
        "no-extra-semi": ["warn"], //disallow unnecessary semicolons
        "no-loss-of-precision": ["warn"], //Disallow Number Literals That Lose Precision
        "no-sparse-arrays": ["warn"], //disallow sparse arrays

        "no-extra-boolean-cast": ["warn"], //disallow unnecessary boolean casts
        "no-unreachable": ["warn"], //disallow unreachable code after return, throw, continue, and break statements
        // Turn to error when possible
        "max-len": ["warn", { "code": 110 }], //When app is modularised with lazy loading remove this line

        // ------------------------------------------------------------------------------
        // Best practices -> OFF
        //-------------------------------------------------------------------------------
        "dot-location": ["off"], //Enforce newline before and after dot
        "guard-for-in": ["off"], //Require Guarding for-in
        "no-invalid-this": ["off"], //Disallow this keywords outside of classes or class-like objects.
        "no-restricted-properties": ["off"], //disallow certain object properties
        "radix": ["off"], //Require Radix Parameter
        "strict": ["off"], //require or disallow strict mode directives

        // ------------------------------------------------------------------------------
        // Best practices -> errors non mergeable
        //-------------------------------------------------------------------------------
        "array-callback-return": ["error"], //Enforces return statements in callbacks of array"s methods
        "block-scoped-var": ["error"], //Treat var as Block Scoped
        "complexity": ["error", { "max": 6 }], //Limit Cyclomatic Complexity
        "consistent-return": ["error"], //require return statements to either always or never specify values
        "curly": ["error"], //Require Following Curly Brace Conventions
        "default-case": ["error"], //Require Default Case in Switch Statements
        "default-case-last": ["error"], //Enforce default clauses in switch statements to be last
        "dot-notation": ["error"], //Require Dot Notation
        "eqeqeq": ["error"], //Require === and !==
        "grouped-accessor-pairs": ["error"], //Require grouped accessor pairs in object literals and classes
        "max-classes-per-file": ["error"], //enforce a maximum number of classes per file
        "no-alert": ["error"], //Disallow Use of Alert
        "no-caller": ["error"], //Disallow Use of caller/callee
        "no-constructor-return": ["error"], //Disallow returning value in constructor
        "no-div-regex": ["error"], //Disallow Regular Expressions That Look Like Division
        "no-else-return": ["error"], //Disallow return before else
        "no-empty-function": ["error", { "allow": ["constructors"] }], //Disallow empty functions
        "no-empty-pattern": ["error"], //Disallow empty destructuring patterns
        "no-eq-null": ["error"], //Disallow Null Comparisons
        "no-eval": ["error"], //Disallow eval()
        "no-extend-native": ["error"], //Disallow Extending of Native Objects
        "no-extra-bind": ["error"], //Disallow unnecessary function binding
        "no-fallthrough": ["error"], //Disallow Case Statement Fallthrough
        "no-floating-decimal": ["error"], //Disallow Floating Decimals
        "no-global-assign": ["error"], //Disallow assignment to native objects or read-only global variables
        "no-implicit-coercion": ["error"], //Disallow the type conversion with shorter notations.
        //TODO : FIX ERROR "no-implicit-globals": ["error"], //Disallow declarations in the global scope
        "no-implied-eval": ["error"], //Disallow Implied eval()
        "no-iterator": ["error"], //Disallow Iterator
        "no-labels": ["error"], //Disallow Labeled Statements
        "no-lone-blocks": ["error"], //Disallow Unnecessary Nested Blocks
        "no-loop-func": ["error"], //Disallow Functions in Loops
        "no-multi-spaces": ["error"], //Disallow multiple spaces
        "no-multi-str": ["error"], //Disallow Multiline Strings
        "no-new": ["error"], //Disallow new For Side Effects
        "no-new-wrappers": ["error"], //Disallow Primitive Wrapper Instances
        "no-octal": ["error"], //disallow octal literals
        "no-octal-escape": ["error"], //disallow octal escape sequences in string literals
        "no-param-reassign": ["error"], //Disallow Reassignment of Function Parameters
        "no-proto": ["error"], //Disallow Use of __proto__

        "no-return-assign": ["error"], //Disallow Assignment in return Statement
        "no-return-await": ["error"], //Disallows unnecessary return await
        "no-script-url": ["error"], //Disallow Script URLs
        "no-self-assign": ["error"], //Disallow Self Assignment
        "no-self-compare": ["error"], //Disallow Self Compare
        "no-sequences": ["error"], //Disallow Use of the Comma Operator
        "no-throw-literal": ["error"], //Restrict what can be thrown as an exception
        "no-unmodified-loop-condition": ["error"], //Disallow unmodified conditions of loops
        "no-unused-labels": ["error"], //Disallow Unused Labels
        "no-useless-call": ["error"], //Disallow unnecessary .call() and .apply().
        "no-useless-catch": ["error"], //Disallow unnecessary catch clauses
        "no-useless-concat": ["error"], //Disallow unnecessary concatenation of strings
        "no-useless-escape": ["error"], //Disallow unnecessary escape usage
        "no-useless-return": ["error"], //Disallow redundant return statements
        "no-void": ["error"], //Disallow use of the void operator.
        "no-with": ["error"], //disallow with statements
        "prefer-promise-reject-errors": ["error"], //require using Error objects as Promise rejection reasons
        "prefer-regex-literals": ["error"], //Disallow use of the RegExp constructor in favor of regular expression literals
        "require-await": ["error"], //Disallow async functions which have no await expression
        "vars-on-top": ["error"], //Require Variable Declarations to be at the top of their scope
        "wrap-iife": ["error"], //Require IIFEs to be Wrapped
        "yoda": ["error"], //Require or disallow Yoda Conditions

        // ------------------------------------------------------------------------------
        // Best practices -> just a warning
        //-------------------------------------------------------------------------------
        "accessor-pairs": ["warn"], //Enforces getter/setter pairs in objects and classes
        "class-methods-use-this": ["warn"], //Enforce that class methods utilize this
        "no-extra-label": ["warn"], //Disallow Unnecessary Labels
        "no-magic-numbers": [
            "warn",
            { "ignore": [0, 1], "ignoreArrayIndexes": true }
        ], //Disallow Magic Numbers
        "no-warning-comments": ["warn"], //Disallow Warning Comments
        "prefer-named-capture-group": ["warn"], //Suggest using named capture group in regular expression
        "require-unicode-regexp": ["warn"], //Enforce the use of u flag on RegExp

        // Turn to error when possible
        "default-param-last": ["warn"], //enforce default parameters to be last
        // Turn to error when possible
        "no-redeclare": ["warn"], //disallow variable redeclaration
        // Turn to error when possible
        "no-unused-expressions": ["warn"], //Disallow Unused Expressions
        "no-case-declarations": ["warn"], //Disallow lexical declarations in case/default clauses

        // ------------------------------------------------------------------------------
        // Variables -> OFF
        //-------------------------------------------------------------------------------
        "init-declarations": ["off"], //require or disallow initialization in variable declarations
        "no-restricted-globals": ["off"], //Disallow specific global variables
        "no-undef": ["off"], //Disallow Undeclared Variables
        "no-unused-vars": ["off"], //Disallow Unused Variables (off because using @typescript-eslint/no-unused-vars)
        "no-shadow": ["off"], //disallow variable declarations from shadowing variables declared in the outer scope

        // ------------------------------------------------------------------------------
        // Variables -> errors non mergeable
        //-------------------------------------------------------------------------------
        "no-delete-var": ["error"], //disallow deleting variables
        "no-label-var": ["error"], //Disallow Labels That Are Variables Names

        "no-shadow-restricted-names": ["error"], //Disallow Shadowing of Restricted Names
        "no-undef-init": ["error"], //Disallow Initializing to undefined
        "no-undefined": ["error"], //Disallow Use of undefined Variable
        "no-use-before-define": ["error"], //Disallow Early Use

        // ------------------------------------------------------------------------------
        // Variables -> just a warning
        //-------------------------------------------------------------------------------
        // Turn to error when possible. this one could be useful without the args none filter but it triggers for all the component construtor and interfaces containing methods, could be used in combination of eslint-ignore though. to discuss
        "@typescript-eslint/no-unused-vars": [
            "warn",
            { "ignoreRestSiblings": true, "args": "none" }
        ], //Disallow Unused Variables

        // ------------------------------------------------------------------------------
        // Stylistic Issues -> OFF
        //-------------------------------------------------------------------------------
        "capitalized-comments": ["off"], //enforce or disallow capitalization of the first letter of a comment
        "eol-last": ["off"], //require or disallow newline at the end of files
        "func-names": ["off"], //Require or disallow named function expressions
        "function-paren-newline": ["off"], //enforce consistent line breaks inside function parentheses
        "id-denylist": ["off"], //disallow specified identifiers
        "id-match": ["off"], //require identifiers to match a specified regular expression
        "implicit-arrow-linebreak": ["off"], //Enforce the location of arrow function bodies with implicit returns
        "jsx-quotes": ["off"], //enforce the consistent use of either double or single quotes in JSX attributes
        "line-comment-position": ["off"], //enforce position of line comments
        "linebreak-style": ["off"], //enforce consistent linebreak style
        "lines-around-comment": ["off"], // require empty lines around comments
        "multiline-ternary": ["off"], //Enforce or disallow newlines between operands of ternary expressions
        "no-continue": ["off"], //disallow continue statements
        "no-inline-comments": ["off"], //disallow inline comments after code
        "no-plusplus": ["off"], //disallow the unary operators ++ and --
        "no-ternary": ["off"], //disallow ternary operators
        "nonblock-statement-body-position": ["off"], //enforce the location of single-line statements
        "object-curly-newline": [
            "off",
            {
                "ObjectExpression": { "multiline": true },
                "ObjectPattern": { "multiline": true },
                "ImportDeclaration": { "multiline": true },
                "ExportDeclaration": { "multiline": true }
            }
        ], //enforce consistent line breaks inside braces
        "one-var-declaration-per-line": ["off"], //require or disallow newlines around variable declarations
        "operator-linebreak": ["off"], //enforce consistent linebreak style for operators
        "padding-line-between-statements": ["off"], //Require or disallow padding lines between statements
        "prefer-exponentiation-operator": ["off"], //Disallow the use of Math.pow in favor of the ** operator

        // ------------------------------------------------------------------------------
        // Stylistic Issues -> errors non mergeable
        //-------------------------------------------------------------------------------
        "array-bracket-newline": ["error", "consistent"], //enforce line breaks after opening and before closing array brackets
        "array-bracket-spacing": ["error", "never"], //array-bracket-spacing
        "array-element-newline": [
            "error",
            {
                "ArrayExpression": "consistent",
                "ArrayPattern": { "minItems": 5 }
            }
        ], //enforce line breaks between array elements
        "block-spacing": ["error"], //Disallow or enforce spaces inside of blocks after opening block and before closing block
        "brace-style": ["error"], //Require Brace Style
        "comma-dangle": [
            "error",
            {
                "arrays": "always-multiline",
                "objects": "always-multiline",
                "imports": "always-multiline",
                "exports": "always-multiline",
                "functions": "never"
            }
        ], //require or disallow trailing commas
        "comma-spacing": ["error", { "before": false, "after": true }], //Enforces spacing around commas
        "comma-style": ["error", "last"], //Comma style
        "computed-property-spacing": ["error", "never"], //Disallow or enforce spaces inside of computed properties
        "consistent-this": ["error", "$this"], //Require Consistent This
        "func-call-spacing": ["error", "never"], //require or disallow spacing between function identifiers and their invocations
        "func-name-matching": ["error"], //require function names to match the name of the variable or property to which they are assigned
        "func-style": ["error", "declaration", { "allowArrowFunctions": true }], //enforce the consistent use of either function declarations or expressions
        "function-call-argument-newline": ["error", "consistent"], //enforce line breaks between arguments of a function call
        "id-length": [
            "error",
            {
                "min": 3,
                "max": 25,
                "exceptionPatterns": ["[a-z]"],
                "exceptions": ["en", "fr", "de", "_", "_2", "_3"]
            }
        ], //enforce minimum and maximum identifier lengths
        //TODO : FIX ERROR "indent": ["error", 4], //
        "key-spacing": ["error", { "mode": "strict" }], // enforce consistent spacing between keys and values in object literal properties
        "keyword-spacing": ["error", { "before": true }], //enforce consistent spacing before and after keywords
        "lines-between-class-members": [
            "error",
            "always",
            { "exceptAfterSingleLine": true }
        ], // require or disallow an empty line between class members
        "max-depth": ["error", 4], //enforce a maximum depth that blocks can be nested
        "max-lines-per-function": [
            "error",
            { "max": 50, "skipBlankLines": true, "skipComments": true }
        ], //enforce a maximum function length
        "max-nested-callbacks": ["error", 3], //enforce a maximum depth that callbacks can be nested
        "max-params": ["error", 6], // enforce a maximum number of parameters in function definitions
        "max-statements": ["error", 10], //enforce a maximum number of statements allowed in function blocks
        "max-statements-per-line": ["error", { "max": 1 }], //enforce a maximum number of statements allowed per line
        "multiline-comment-style": ["error", "bare-block"], //enforce a particular style for multiline comments
        "new-cap": [
            "error",
            {
                "newIsCap": true,
                "capIsNewExceptions": [
                    "NgModule",
                    "Component",
                    "Inject",
                    "Injectable",
                    "Directive",
                    "Pipe",
                    "Input",
                    "Output",
                    "HostBinding",
                    "HostListener",
                    "ContentChild",
                    "ContentChildren",
                    "ViewChild",
                    "ViewChildren",
                    "Effect"
                ]
            }
        ], // require constructor names to begin with a capital letter
        "new-parens": ["error"], // require parentheses when invoking a constructor with no arguments
        "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 3 }], //require a newline after each call in a method chain
        "no-array-constructor": ["error"], // disallow Array constructors
        "no-lonely-if": ["error"], // disallow if statements as the only statement in else blocks
        "no-mixed-operators": ["error"], // Disallow mixes of different operators
        "no-mixed-spaces-and-tabs": "error", //disallow mixed spaces and tabs for indentation
        "no-multi-assign": "error", //Disallow Use of Chained Assignment Expressions
        "no-multiple-empty-lines": ["error", { "max": 2 }], // disallow multiple empty lines
        "no-negated-condition": "error", //disallow negated conditions
        "no-nested-ternary": "error", //disallow nested ternary expressions
        "no-new-object": "error", //disallow Object constructors
        "no-tabs": ["error"], // disallow all tabs
        "no-trailing-spaces": "error", //disallow trailing whitespace at the end of lines
        "no-underscore-dangle": "error", //disallow dangling underscores in identifiers
        "no-unneeded-ternary": "error", //disallow ternary operators when simpler alternatives exist
        "no-whitespace-before-property": "error", //disallow whitespace before properties
        "object-curly-spacing": ["error", "always"], //enforce consistent spacing inside braces
        "object-property-newline": [
            "error",
            { "allowAllPropertiesOnSameLine": true }
        ], //enforce placing object properties on separate lines
        "one-var": ["error", "never"], //enforce variables to be declared either together or separately in functions
        "operator-assignment": ["error", "always"], //require or disallow assignment operator shorthand where possible
        "padded-blocks": ["error", "never"], //require or disallow padding within blocks
        "prefer-object-spread": "error", // Prefer use of an object spread over Object.assign
        "quote-props": ["error", "as-needed"], //require quotes around object literal property names
        "quotes": ["error", "single", { "allowTemplateLiterals": true }], //enforce the consistent use of either backticks, double, or single quotes
        "semi": ["error", "always"], //require or disallow semicolons instead of ASI
        "semi-spacing": "error", //Enforce spacing before and after semicolons
        "semi-style": ["error", "last"], //Enforce location of semicolons
        "space-before-blocks": "error", //Require Or Disallow Space Before Blocks
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "never",
                "named": "never",
                "asyncArrow": "always"
            }
        ], //Require or disallow a space before function parenthesis
        "space-in-parens": ["error", "never"], //Disallow or enforce spaces inside of parentheses
        "space-infix-ops": "error", //require spacing around infix operators
        "space-unary-ops": "error", //Require or disallow spaces before/after unary operators
        "spaced-comment": ["error", "always", { "markers": ["/"] }], //Requires or disallows a whitespace (space or tab) beginning a comment
        "switch-colon-spacing": ["error", { "after": true, "before": false }], //Enforce spacing around colons of switch statements
        "template-tag-spacing": "error", //Require or disallow spacing between template tags and their literals
        "unicode-bom": ["error", "never"], //Require or disallow the Unicode Byte Order Mark (BOM)
        "wrap-regex": "error", //Require Regex Literals to be Wrapped

        // ------------------------------------------------------------------------------
        // Stylistic Issues -> just a warning
        //-------------------------------------------------------------------------------
        "camelcase": ["warn"], //Require CamelCase
        "max-lines": [
            "warn",
            { "max": 350, "skipBlankLines": true, "skipComments": true }
        ], //enforce a maximum file length
        "no-bitwise": ["warn"], //disallow bitwise operators
        "sort-keys": "off", //require object keys to be sorted
        "sort-vars": "warn", //Variable Sorting

        // ------------------------------------------------------------------------------
        // ES6 -> OFF
        //-------------------------------------------------------------------------------
        "no-confusing-arrow": ["off"], //Disallow arrow functions where they could be confused with comparisons
        "no-restricted-exports": ["off"], //Disallow specified names in exports
        "no-restricted-imports": ["off"], //Disallow specific imports
        "no-useless-constructor": ["off"], //Disallow unnecessary constructor
        "sort-imports": ["off"], //Import Sorting

        // ------------------------------------------------------------------------------
        // ES6 -> errors non mergeable
        //-------------------------------------------------------------------------------
        "arrow-body-style": ["error", "as-needed"], //Require braces in arrow function body
        "arrow-spacing": ["error", { "before": true, "after": true }], //Require space before/after arrow function"s arrow
        "constructor-super": "error", //Verify calls of super() in constructors
        "generator-star-spacing": ["error", { "before": true, "after": false }], //Enforce spacing around the * in generator functions
        "no-class-assign": "error", //Disallow modifying variables of class declarations
        "no-const-assign": "error", //Disallow modifying variables that are declared using const
        "no-dupe-class-members": "error", //Disallow duplicate name in class members
        "no-duplicate-imports": "error", //Disallow duplicate imports
        "no-new-symbol": "error", //Disallow Symbol Constructor
        "no-this-before-super": "error", // no-this-before-super
        "no-useless-computed-key": "error", //Disallow unnecessary computed property keys in objects and classes
        "no-useless-rename": "error", //Disallow renaming import, export, and destructured assignments to the same name
        "no-var": "error", //require let or const instead of var
        "object-shorthand": "error", //Require Object Literal Shorthand Syntax
        "prefer-arrow-callback": "error", //Require using arrow functions for callbacks
        "prefer-const": "error", //Suggest using const
        "prefer-numeric-literals": "error", //disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": "error", //Suggest using the rest parameters instead of arguments
        "prefer-spread": ["error"], //Suggest using spread syntax instead of .apply().
        "require-yield": "error", //Disallow generator functions that do not have yield
        "rest-spread-spacing": ["error", "never"], //Enforce spacing between rest and spread operators and their expressions
        "symbol-description": "error", //require symbol description
        "template-curly-spacing": "error", //Enforce Usage of Spacing in Template Strings
        "yield-star-spacing": ["error", "after"], //Enforce spacing around the * in yield* expressions

        // ------------------------------------------------------------------------------
        // ES6 -> just a warning
        //-------------------------------------------------------------------------------
        "arrow-parens": ["warn", "as-needed"], // Require parens in arrow function arguments
        "prefer-destructuring": ["warn"], //Prefer destructuring from arrays and objects
        "prefer-template": ["warn"] //Suggest using template literals instead of string concatenation.
    }
}
